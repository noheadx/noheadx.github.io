---
title: The CTO trap
layout: post 
---

## The Setup
When you are a CTO, you got the "Technology "already in the title. You love tech, love digging into it, catching up with the latest technologies, knowing everything there is in tech – from hardware to software to IaaS/PaaS, architectures, and tests. You spend hours trying to find solutions, and secretly you envy your engineers because they can do that all day. 
If you are a little like me, you also feel the urge to use that skill to build something beyond mere features or products. You want to shape a company with it. Every CEO/Managing Director is happy to have somebody joining who takes care of that mysterious black box technology and at the same time understands the challenges of running a business.

## The Catch
At the same time, CTOs are managers, mentors, and leaders. You are not just supporting the evolvement of a company – you steer it. The people you hire will influence the company's culture (culture is never top-down, always bottom-up). How you treat them will shape the company's technological success; your decisions will determine if people are happy, motivated, and stay with the company. And that's just the people management part. Add the strategic decisions on technologies, processes, and partners, and you almost got the whole weight of the company resting on your shoulders. It is pretty obvious: your actions define the company's fate and its employees. 

So, let's be honest – how many people do you know that provide a deep understanding of technology. Who can guide and structure complex technological challenges to businesspeople and developers? Who can simultaneously shape teams, hire skilled people, and onboard them in a fast yet efficient way? Who can make technology decisions that take almost no time to implement, are future-proof and risk-agnostic?
And at the same time, co-lead a company – almost always unrelated to technology but instead related to people management and strategic thinking? At some point, it feels like everything is going down the drain because you're not doing your job. 

That situation is what I call **"the CTO trap"** - when you need to fill all of these responsibilities because they come with the job. But realistically speaking: no one can. 

## The Escape
So, you're having all that on your shoulders, now how do you handle that dilemma? Speaking for myself: I love building tech products, and I want real people to use my apps, tools, or platforms because it's making their lives easier. There's one thing that I cannot take anymore, and it's CEOs believing that a CTO will save and run their company for them. 

1. **Start with yourself.** If you want to build something great, accept that there's more to it than just technology. Coding is always the easiest part of it. But if your CEO thinks that you will save the company - then do it! As Peter Drucker said, "Leadership is about doing the right thing." To make a business successful, you need to realize that the 'C' in the title stands for "company." Nobody will take that one of your shoulders (and you shouldn't let them). You are an executive! So get yourself into a driver's mood - out of the victim's role!

2. **Gather a great team.** Everything's easier when you share it, and the most incredible things come out of a collective mind. You might be brilliant at one or two things, but it takes a team to succeed. Finding skilled, motivated people and bringing them together, forming ways of collaboration and efficiency between them, has always been close to a miracle to me. It's like a baby developing in its mother's womb until it is born as the creator's ideal combination. And like the evolvement of a baby, the evolvement of a team takes time - for experiments, learnings, and mistakes. There is no guarantee for success, and way too often, it fails. But a successful outcome will be so powerful in what it achieves that it's always worth a try. People are the key to a great team. Try starting with a few persons you like to work with and grow small groups around them. It's not so much about the technical skills these initial "seeds" bring but if they can lead people, guide and mentor them. It will help when you find people you can trust to spread your idea of working and collaborating in their teams. You need strong multipliers of your personality - build your rat pack! 

3. **Be aware of the impact of your decisions.** Strategic decisions are my favorites. While they do not feel as natural as an operational decision (even though one can be the other and vice versa) – it's about the impact they have. It might take weeks/months,/ sometimes even years to see the outcome of a strategic decision. It might be the move to another market, the add-on feature to your product, or just a database technology. But when the time comes, it will save your backside, make you more money than ever, or help you outsmart your competitors. Strategic decisions have a long-term effect, so making them might seem challenging. Other options might be closer at hand, faster available, or less expensive. But that's why these decisions are called "strategic" – they determine how you place your company and your product in the market. You cannot put yourself next to everyone else and hope they make a mistake. You need to be ahead of the competition and get an advantage. Strategic decisions require forward-thinking and betting on where the market will go next, which is why their impact will be so significant. There are a lot of brilliant (and not so brilliant) books about making strategic decisions out there, so I will not elaborate on that. Just be aware of the nature of your decision and its impact!

4. **Do what you love!** That irresistible urge to understand what makes things work always drove me as a person - from games to complex business systems to virtualization. I believe that every CTO recalls what pushed them into tech. We remember the curiosity and passion for using these bits and bytes to build products that real people use. At some point, we all found out that there are always better developers, better architects, better SREs out there. Yet we keep that fascination for tech over time, and we thank God that a compiler works nowadays basically the same way it did 20 years ago. So, I am saving time for that every week. Joining developers for a round of pair programming (primarily to their amusement, not mine), hacking some scripts - get some crunchtime for yourself and keep the booth on the ground.

## Observe - Try - Repeat
Being a leader is hard. But as the saying goes, "If it hurts, just do it more often." It would be best if you took some time to reflect on your situation once or twice a week. Are you feeling trapped? Which of the escape routes could help you? How could you get back into the driver's seat and help the company? 
It is about continuous improvement - as always. And why not? If you require your teams and peers to improve continuously, why shouldn't you?
Of course, you will get trapped over and over again. But your escape plan is right in front of you. 
